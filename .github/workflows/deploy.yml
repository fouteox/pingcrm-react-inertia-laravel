name: Build and Deploy

on:
  pull_request:
    types: [closed]
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CLOUDFLARED_VERSION: latest
  COMPOSE_FILE: compose.prod.yaml
  PROJECT_DIR: ${{ github.event.repository.name }}

jobs:
  gather-info:
    runs-on: ubuntu-latest
    outputs:
      host_uid: ${{ steps.server-info.outputs.host_uid }}
      host_gid: ${{ steps.server-info.outputs.host_gid }}
      host_arch: ${{ steps.server-info.outputs.host_arch }}
      target_platform: ${{ steps.server-info.outputs.target_platform }}

    steps:
      - name: Install cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/${CLOUDFLARED_VERSION}/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb
          rm cloudflared.deb

      - name: Setup SSH configuration
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_ed25519
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          config: |
            Host ${{ secrets.SSH_REMOTE_HOSTNAME }}
              ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h
              User ${{ secrets.SSH_USER }}
              IdentityFile ~/.ssh/id_ed25519
              StrictHostKeyChecking accept-new
              ServerAliveInterval 60
              ServerAliveCountMax 10

      - name: Get target server information
        id: server-info
        run: |
          get_server_info() {
            SSH_UID=$(ssh ${{ secrets.SSH_REMOTE_HOSTNAME }} "id -u")
            SSH_GID=$(ssh ${{ secrets.SSH_REMOTE_HOSTNAME }} "id -g")
            SSH_ARCH=$(ssh ${{ secrets.SSH_REMOTE_HOSTNAME }} "uname -m")

            case "$SSH_ARCH" in
              "aarch64") DOCKER_ARCH="arm64" ;;
              "x86_64")  DOCKER_ARCH="amd64" ;;
              *)
                echo "Architecture non supportée: $SSH_ARCH"
                exit 1
                ;;
            esac

            {
              echo "host_uid=$SSH_UID"
              echo "host_gid=$SSH_GID"
              echo "host_arch=$DOCKER_ARCH"
              echo "target_platform=linux/$DOCKER_ARCH"
            } >> $GITHUB_OUTPUT
          }

          get_server_info

  build:
    needs: gather-info
    runs-on: ${{ needs.gather-info.outputs.host_arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env.production file
        run: echo "${{ secrets.ENV_FILE_BASE64 }}" | base64 -d > .env.production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          target: prod
          platforms: ${{ needs.gather-info.outputs.target_platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            WWWUSER=${{ needs.gather-info.outputs.host_uid }}
            WWWGROUP=${{ needs.gather-info.outputs.host_gid }}
            TARGETARCH=${{ needs.gather-info.outputs.host_arch }}

  deploy:
    needs: [gather-info, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Install cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/${CLOUDFLARED_VERSION}/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb
          rm cloudflared.deb

      - name: Setup SSH configuration
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_ed25519
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          config: |
            Host ${{ secrets.SSH_REMOTE_HOSTNAME }}
              ProxyCommand /usr/local/bin/cloudflared access ssh --hostname %h
              User ${{ secrets.SSH_USER }}
              IdentityFile ~/.ssh/id_ed25519
              StrictHostKeyChecking accept-new
              ServerAliveInterval 60
              ServerAliveCountMax 10

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare deployment directory
        run: |
          ssh ${{ secrets.SSH_REMOTE_HOSTNAME }} "mkdir -p ~/${PROJECT_DIR}"
          scp ${COMPOSE_FILE} ${{ secrets.SSH_REMOTE_HOSTNAME }}:~/${PROJECT_DIR}/

      - name: Deploy application
        env:
          FULL_IMAGE_NAME: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        run: |
          deploy_app() {
            local host_uid host_gid
            host_uid=$(ssh ${{ secrets.SSH_REMOTE_HOSTNAME }} "id -u")
            host_gid=$(ssh ${{ secrets.SSH_REMOTE_HOSTNAME }} "id -g")

            echo "${{ secrets.GITHUB_TOKEN }}" | ssh ${{ secrets.SSH_REMOTE_HOSTNAME }} \
              "docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin"

            ssh ${{ secrets.SSH_REMOTE_HOSTNAME }} "cd ~/${PROJECT_DIR} && \
              HOST_UID=${host_uid} \
              HOST_GID=${host_gid} \
              IMAGE_NAME=${FULL_IMAGE_NAME} \
              docker compose -f ${COMPOSE_FILE} pull && \
              docker compose -f ${COMPOSE_FILE} up -d"
          }

          deploy_app
          echo "✅ Deployment completed successfully!"
